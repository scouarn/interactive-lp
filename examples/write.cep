nat : type.   #builtin NAT nat.
z : nat.      #builtin NAT_ZERO z.
s nat : nat.  #builtin NAT_SUCC s.

plus nat nat nat : bwd.
plus/z : plus z N N.
plus/s : plus (s N) M (s P) <- plus N M P.

go nat nat : pred.

str : type. #builtin STRING str.
write/str str : action. #builtin WRITE write/str.
write/nat nat : action. #builtin WRITE write/nat.
write/res str nat str nat str nat str : action. #builtin WRITE write/res.

stage rules {
  name: go N M * plus N M P -o

      write/res "The result of " N " + " M " is " P ".\n"

    * write/str "THe result of "
    * write/nat N
    * write/str " + "
    * write/nat M
    * write/str " is "
    * write/nat P
    * write/str ".\n".
}

context init = { go 99 12 }.

#trace _ rules init.
